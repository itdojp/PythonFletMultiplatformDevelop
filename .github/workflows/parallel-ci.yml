name: Parallel Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        test-type: [unit, integration, performance]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-xdist

    - name: Run tests
      run: |
        cd backend
        export TESTING=True
        export DATABASE_URL=sqlite+aiosqlite:///:memory:

        if [ "${{ matrix.test-type }}" == "unit" ]; then
          python -m pytest tests/unit/ -v -n auto --cov=src/backend --cov-report=xml:coverage.xml
        elif [ "${{ matrix.test-type }}" == "integration" ]; then
          python -m pytest tests/integration/ -v -n auto --cov=src/backend --cov-report=xml:coverage.xml
        else
          python -m pytest tests/performance/ -v -n auto --benchmark-autosave --benchmark-json=benchmark.json
        fi

    - name: Upload coverage
      if: ${{ matrix.test-type == 'unit' || matrix.test-type == 'integration' }}
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        name: ${{ matrix.test-type }}
        flags: ${{ matrix.test-type }}
        fail_ci_if_error: true

    - name: Upload benchmark results
      if: ${{ matrix.test-type == 'performance' }}
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: backend/benchmark.json
