{
  "project_templates": [
    {
      "name": "シンプルアプリ",
      "description": "基本的なFletアプリケーションの構造",
      "structure": [
        {
          "path": "src/main.py",
          "content": "import flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"{{app_name}}\"\n    \n    # テーマ設定\n    page.theme_mode = ft.ThemeMode.SYSTEM\n    page.theme = ft.Theme(\n        color_scheme_seed=ft.colors.BLUE,\n        visual_density=ft.ThemeVisualDensity.COMFORTABLE,\n    )\n    \n    # タイトル\n    title = ft.Text(\"{{app_name}}\", size=30, weight=ft.FontWeight.BOLD)\n    \n    # メインコンテンツ\n    content = ft.Column([\n        ft.Text(\"ようこそ！\", size=20),\n        ft.ElevatedButton(\"クリックしてください\", on_click=lambda _: show_message())\n    ])\n    \n    def show_message():\n        page.snack_bar = ft.SnackBar(content=ft.Text(\"ボタンがクリックされました！\"))\n        page.snack_bar.open = True\n        page.update()\n    \n    # レイアウト\n    page.add(\n        title,\n        ft.Divider(),\n        content\n    )\n\nif __name__ == \"__main__\":\n    ft.app(target=main)\n"
        },
        {
          "path": "src/assets/README.md",
          "content": "# アセットディレクトリ\n\nこのディレクトリには、アプリケーションで使用される静的アセット（画像、アイコン、フォントなど）を格納します。\n"
        },
        {
          "path": "src/components/__init__.py",
          "content": "# コンポーネントパッケージ\n"
        },
        {
          "path": "src/components/common/__init__.py",
          "content": "# 共通コンポーネントパッケージ\n"
        },
        {
          "path": "README.md",
          "content": "# {{app_name}}\n\n{{app_description}}\n\n## セットアップ\n\n```bash\n# 依存関係のインストール\npip install -r requirements.txt\n\n# アプリケーションの実行\npython src/main.py\n```\n\n## ディレクトリ構造\n\n- `src/`: ソースコード\n  - `assets/`: 静的アセット（画像、アイコンなど）\n  - `components/`: 再利用可能なUIコンポーネント\n"
        },
        {
          "path": "requirements.txt",
          "content": "flet>=0.8.0\n"
        }
      ]
    },
    {
      "name": "マルチページアプリ",
      "description": "複数の画面を持つFletアプリケーション",
      "structure": [
        {
          "path": "src/main.py",
          "content": "import flet as ft\nfrom views.home_view import HomeView\nfrom views.settings_view import SettingsView\nfrom views.about_view import AboutView\n\ndef main(page: ft.Page):\n    page.title = \"{{app_name}}\"\n    \n    # テーマ設定\n    page.theme_mode = ft.ThemeMode.SYSTEM\n    page.theme = ft.Theme(\n        color_scheme_seed=ft.colors.BLUE,\n        visual_density=ft.ThemeVisualDensity.COMFORTABLE,\n    )\n    \n    # ビュー\n    views = {\n        \"/\": HomeView(page),\n        \"/settings\": SettingsView(page),\n        \"/about\": AboutView(page)\n    }\n    \n    # 現在のビュー\n    current_view = views[\"/\"]\n    \n    # ナビゲーション\n    def navigate(e):\n        nonlocal current_view\n        route = e.control.data\n        \n        # 現在のビューをクリア\n        page.controls.pop()\n        \n        # 新しいビューを設定\n        current_view = views[route]\n        page.controls.append(current_view)\n        \n        # ナビゲーションバーの選択状態を更新\n        for item in nav_rail.controls:\n            if isinstance(item, ft.NavigationRailDestination):\n                item.selected = item.label_content.value == route_names[route]\n        \n        page.update()\n    \n    # ルート名のマッピング\n    route_names = {\n        \"/\": \"ホーム\",\n        \"/settings\": \"設定\",\n        \"/about\": \"アプリについて\"\n    }\n    \n    # ナビゲーションレール\n    nav_rail = ft.NavigationRail(\n        selected_index=0,\n        label_type=ft.NavigationRailLabelType.ALL,\n        destinations=[\n            ft.NavigationRailDestination(\n                icon=ft.icons.HOME_OUTLINED,\n                selected_icon=ft.icons.HOME,\n                label_content=ft.Text(route_names[\"/\"]),\n                data=\"/\"\n            ),\n            ft.NavigationRailDestination(\n                icon=ft.icons.SETTINGS_OUTLINED,\n                selected_icon=ft.icons.SETTINGS,\n                label_content=ft.Text(route_names[\"/settings\"]),\n                data=\"/settings\"\n            ),\n            ft.NavigationRailDestination(\n                icon=ft.icons.INFO_OUTLINED,\n                selected_icon=ft.icons.INFO,\n                label_content=ft.Text(route_names[\"/about\"]),\n                data=\"/about\"\n            ),\n        ],\n        on_change=lambda e: navigate(e)\n    )\n    \n    # レイアウト\n    page.add(\n        ft.Row(\n            [\n                nav_rail,\n                ft.VerticalDivider(width=1),\n                current_view\n            ],\n            expand=True\n        )\n    )\n\nif __name__ == \"__main__\":\n    ft.app(target=main)\n"
        },
        {
          "path": "src/views/__init__.py",
          "content": "# ビュー（画面）パッケージ\n"
        },
        {
          "path": "src/views/home_view.py",
          "content": "import flet as ft\n\nclass HomeView(ft.UserControl):\n    def __init__(self, page):\n        super().__init__()\n        self.page = page\n    \n    def build(self):\n        return ft.Container(\n            ft.Column([\n                ft.Text(\"ホーム画面\", size=30, weight=ft.FontWeight.BOLD),\n                ft.Text(\"メインコンテンツをここに配置します\", size=16),\n                ft.Card(\n                    content=ft.Container(\n                        content=ft.Column([\n                            ft.Text(\"カードコンテンツ\", weight=ft.FontWeight.BOLD),\n                            ft.Text(\"説明文をここに入力します\"),\n                            ft.ElevatedButton(\"アクション\")\n                        ]),\n                        padding=10\n                    )\n                )\n            ]),\n            padding=20,\n            expand=True\n        )\n"
        },
        {
          "path": "src/views/settings_view.py",
          "content": "import flet as ft\n\nclass SettingsView(ft.UserControl):\n    def __init__(self, page):\n        super().__init__()\n        self.page = page\n    \n    def build(self):\n        # テーマモード選択\n        theme_mode = ft.RadioGroup(\n            content=ft.Column([\n                ft.Radio(value=\"system\", label=\"システム設定に従う\"),\n                ft.Radio(value=\"light\", label=\"ライトモード\"),\n                ft.Radio(value=\"dark\", label=\"ダークモード\"),\n            ]),\n            value=\"system\"\n        )\n        \n        def theme_changed(e):\n            if theme_mode.value == \"light\":\n                self.page.theme_mode = ft.ThemeMode.LIGHT\n            elif theme_mode.value == \"dark\":\n                self.page.theme_mode = ft.ThemeMode.DARK\n            else:\n                self.page.theme_mode = ft.ThemeMode.SYSTEM\n            self.page.update()\n        \n        theme_mode.on_change = theme_changed\n        \n        return ft.Container(\n            ft.Column([\n                ft.Text(\"設定\", size=30, weight=ft.FontWeight.BOLD),\n                ft.Divider(),\n                ft.Text(\"テーマモード\", size=16, weight=ft.FontWeight.BOLD),\n                theme_mode,\n                ft.Divider(),\n                ft.Text(\"その他の設定\", size=16, weight=ft.FontWeight.BOLD),\n                ft.Switch(label=\"通知を受け取る\", value=True),\n                ft.Slider(min=0, max=100, divisions=10, value=50, label=\"{value}%\"),\n            ]),\n            padding=20,\n            expand=True\n        )\n"
        },
        {
          "path": "src/views/about_view.py",
          "content": "import flet as ft\n\nclass AboutView(ft.UserControl):\n    def __init__(self, page):\n        super().__init__()\n        self.page = page\n    \n    def build(self):\n        return ft.Container(\n            ft.Column([\n                ft.Text(\"アプリについて\", size=30, weight=ft.FontWeight.BOLD),\n                ft.Text(\"{{app_name}}\", size=20, weight=ft.FontWeight.BOLD),\n                ft.Text(\"バージョン: 1.0.0\"),\n                ft.Text(\"{{app_description}}\"),\n                ft.Divider(),\n                ft.Text(\"© 2023 開発者名\"),\n            ]),\n            padding=20,\n            expand=True\n        )\n"
        },
        {
          "path": "src/assets/README.md",
          "content": "# アセットディレクトリ\n\nこのディレクトリには、アプリケーションで使用される静的アセット（画像、アイコン、フォントなど）を格納します。\n"
        },
        {
          "path": "README.md",
          "content": "# {{app_name}}\n\n{{app_description}}\n\n## セットアップ\n\n```bash\n# 依存関係のインストール\npip install -r requirements.txt\n\n# アプリケーションの実行\npython src/main.py\n```\n\n## ディレクトリ構造\n\n- `src/`: ソースコード\n  - `views/`: 各画面のビューコンポーネント\n  - `assets/`: 静的アセット（画像、アイコンなど）\n"
        },
        {
          "path": "requirements.txt",
          "content": "flet>=0.8.0\n"
        }
      ]
    },
    {
      "name": "レスポンシブアプリ",
      "description": "さまざまな画面サイズに対応したFletアプリケーション",
      "structure": [
        {
          "path": "src/main.py",
          "content": "import flet as ft\nfrom utils.responsive import ResponsiveLayout\nfrom components.header import Header\nfrom components.sidebar import Sidebar\nfrom components.content import Content\n\ndef main(page: ft.Page):\n    page.title = \"{{app_name}}\"\n    \n    # テーマ設定\n    page.theme_mode = ft.ThemeMode.SYSTEM\n    page.theme = ft.Theme(\n        color_scheme_seed=ft.colors.BLUE,\n        visual_density=ft.ThemeVisualDensity.COMFORTABLE,\n    )\n    \n    # レスポンシブ判定用\n    def on_page_resize(_):\n        # デスクトップ・タブレット・モバイルの判定\n        layout.update_layout(page.width)\n    \n    # 画面サイズ変更イベント\n    page.on_resize = on_page_resize\n    \n    # レスポンシブレイアウト\n    layout = ResponsiveLayout()\n    \n    # コンポーネント\n    header = Header(\"{{app_name}}\")\n    sidebar = Sidebar()\n    content = Content()\n    \n    # メインビュー\n    def build_main_view():\n        if layout.is_mobile:\n            # モバイルレイアウト\n            return ft.Column([\n                header,\n                content,\n                ft.Container(\n                    content=sidebar.get_bottom_nav(),\n                    padding=ft.padding.only(bottom=20, top=10)\n                )\n            ], expand=True)\n        else:\n            # デスクトップ・タブレットレイアウト\n            return ft.Row([\n                sidebar,\n                ft.VerticalDivider(width=1),\n                ft.Column([\n                    header,\n                    content\n                ], expand=True)\n            ], expand=True)\n    \n    # ビュー更新関数\n    def update_view():\n        page.controls.clear()\n        page.controls.append(build_main_view())\n        page.update()\n    \n    # レイアウト変更時のコールバック\n    layout.on_layout_change = update_view\n    \n    # 初期レイアウト設定\n    layout.update_layout(page.width)\n    \n    # 初期ビュー設定\n    page.add(build_main_view())\n\nif __name__ == \"__main__\":\n    ft.app(target=main)\n"
        },
        {
          "path": "src/utils/__init__.py",
          "content": "# ユーティリティパッケージ\n"
        },
        {
          "path": "src/utils/responsive.py",
          "content": "class ResponsiveLayout:\n    \"\"\"レスポンシブレイアウトを管理するクラス\"\"\"\n    \n    def __init__(self):\n        self.is_mobile = False      # モバイル: 0-600px\n        self.is_tablet = False      # タブレット: 601-960px\n        self.is_desktop = False     # デスクトップ: 961px以上\n        \n        # レイアウト変更時のコールバック関数\n        self.on_layout_change = None\n    \n    def update_layout(self, width):\n        \"\"\"画面幅に応じてレイアウトを更新\"\"\"\n        old_mobile = self.is_mobile\n        old_tablet = self.is_tablet\n        old_desktop = self.is_desktop\n        \n        # レイアウトタイプを更新\n        self.is_mobile = width <= 600\n        self.is_tablet = 600 < width <= 960\n        self.is_desktop = width > 960\n        \n        # レイアウトが変更された場合のみコールバックを実行\n        layout_changed = (old_mobile != self.is_mobile or \n                        old_tablet != self.is_tablet or \n                        old_desktop != self.is_desktop)\n        \n        if layout_changed and self.on_layout_change:\n            self.on_layout_change()\n        \n        return layout_changed\n    \n    @property\n    def current_layout(self):\n        \"\"\"現在のレイアウトタイプを文字列で返す\"\"\"\n        if self.is_mobile:\n            return \"mobile\"\n        elif self.is_tablet:\n            return \"tablet\"\n        else:\n            return \"desktop\"\n"
        },
        {
          "path": "src/components/__init__.py",
          "content": "# コンポーネントパッケージ\n"
        },
        {
          "path": "src/components/header.py",
          "content": "import flet as ft\n\nclass Header(ft.UserControl):\n    \"\"\"アプリケーションヘッダーコンポーネント\"\"\"\n    \n    def __init__(self, title):\n        super().__init__()\n        self.title = title\n    \n    def build(self):\n        return ft.Container(\n            content=ft.Row([\n                ft.Text(self.title, size=24, weight=ft.FontWeight.BOLD),\n                ft.Spacer(),\n                ft.IconButton(icon=ft.icons.SEARCH, tooltip=\"検索\"),\n                ft.IconButton(icon=ft.icons.NOTIFICATIONS_OUTLINED, tooltip=\"通知\"),\n                ft.IconButton(icon=ft.icons.ACCOUNT_CIRCLE_OUTLINED, tooltip=\"プロフィール\")\n            ]),\n            padding=10,\n            border=ft.border.only(bottom=ft.border.BorderSide(1, ft.colors.BLACK12))\n        )\n"
        },
        {
          "path": "src/components/sidebar.py",
          "content": "import flet as ft\n\nclass Sidebar(ft.UserControl):\n    \"\"\"サイドバーとボトムナビゲーションを提供するコンポーネント\"\"\"\n    \n    def __init__(self):\n        super().__init__()\n        \n        # ナビゲーション項目\n        self.nav_items = [\n            {\"icon\": ft.icons.HOME_OUTLINED, \"selected_icon\": ft.icons.HOME, \"label\": \"ホーム\", \"route\": \"/\"},\n            {\"icon\": ft.icons.EXPLORE_OUTLINED, \"selected_icon\": ft.icons.EXPLORE, \"label\": \"探索\", \"route\": \"/explore\"},\n            {\"icon\": ft.icons.FAVORITE_OUTLINE, \"selected_icon\": ft.icons.FAVORITE, \"label\": \"お気に入り\", \"route\": \"/favorites\"},\n            {\"icon\": ft.icons.PERSON_OUTLINE, \"selected_icon\": ft.icons.PERSON, \"label\": \"プロフィール\", \"route\": \"/profile\"},\n            {\"icon\": ft.icons.SETTINGS_OUTLINED, \"selected_icon\": ft.icons.SETTINGS, \"label\": \"設定\", \"route\": \"/settings\"}\n        ]\n        \n        # 選択中のインデックス\n        self.selected_index = 0\n    \n    def build(self):\n        # サイドナビゲーション\n        nav_rail = ft.NavigationRail(\n            selected_index=self.selected_index,\n            label_type=ft.NavigationRailLabelType.ALL,\n            min_width=80,\n            min_extended_width=180,\n            destinations=[\n                ft.NavigationRailDestination(\n                    icon=item[\"icon\"],\n                    selected_icon=item[\"selected_icon\"],\n                    label=item[\"label\"]\n                ) for item in self.nav_items\n            ],\n            on_change=self.on_nav_change\n        )\n        \n        return nav_rail\n    \n    def get_bottom_nav(self):\n        \"\"\"モバイル向けのボトムナビゲーションバーを返す\"\"\"\n        return ft.NavigationBar(\n            destinations=[\n                ft.NavigationDestination(\n                    icon=item[\"icon\"],\n                    selected_icon=item[\"selected_icon\"],\n                    label=item[\"label\"]\n                ) for item in self.nav_items\n            ],\n            selected_index=self.selected_index,\n            on_change=self.on_nav_change\n        )\n    \n    def on_nav_change(self, e):\n        \"\"\"ナビゲーション項目変更時のコールバック\"\"\"\n        self.selected_index = e.control.selected_index\n        # ここにルーティングロジックを追加\n"
        },
        {
          "path": "src/components/content.py",
          "content": "import flet as ft\n\nclass Content(ft.UserControl):\n    \"\"\"メインコンテンツエリアコンポーネント\"\"\"\n    \n    def __init__(self):\n        super().__init__()\n    \n    def build(self):\n        # カードのリスト\n        cards = []\n        \n        # サンプルコンテンツとしてカードを追加\n        for i in range(6):\n            card = ft.Card(\n                content=ft.Container(\n                    content=ft.Column([\n                        ft.Row([\n                            ft.Icon(ft.icons.ARTICLE_OUTLINED),\n                            ft.Text(f\"アイテム {i+1}\", weight=ft.FontWeight.BOLD),\n                        ]),\n                        ft.Text(\"これはサンプルのコンテンツカードです。実際のアプリケーションでは、ここに関連する情報が表示されます。\"),\n                        ft.Row([\n                            ft.TextButton(\"詳細\"),\n                            ft.TextButton(\"共有\")\n                        ], alignment=ft.MainAxisAlignment.END)\n                    ]),\n                    padding=15,\n                ),\n                margin=10\n            )\n            cards.append(card)\n        \n        # カードをレスポンシブに配置するレイアウト\n        responsive_layout = ft.ResponsiveRow(\n            [\n                ft.Column([card], col={\"xs\": 12, \"sm\": 6, \"md\": 6, \"lg\": 4, \"xl\": 3}) \n                for card in cards\n            ]\n        )\n        \n        return ft.Container(\n            content=ft.Column([\n                ft.Text(\"コンテンツ\", size=20, weight=ft.FontWeight.BOLD),\n                responsive_layout\n            ]),\n            padding=20,\n            expand=True\n        )\n"
        },
        {
          "path": "src/assets/README.md",
          "content": "# アセットディレクトリ\n\nこのディレクトリには、アプリケーションで使用される静的アセット（画像、アイコン、フォントなど）を格納します。\n"
        },
        {
          "path": "README.md",
          "content": "# {{app_name}}\n\n{{app_description}}\n\n## セットアップ\n\n```bash\n# 依存関係のインストール\npip install -r requirements.txt\n\n# アプリケーションの実行\npython src/main.py\n```\n\n## レスポンシブデザイン\n\nこのアプリケーションは以下の画面サイズに最適化されています：\n\n- モバイル: 0-600px\n- タブレット: 601-960px\n- デスクトップ: 961px以上\n\n## ディレクトリ構造\n\n- `src/`: ソースコード\n  - `components/`: 再利用可能なUIコンポーネント\n  - `utils/`: ユーティリティ機能（レスポンシブ対応など）\n  - `assets/`: 静的アセット（画像、アイコンなど）\n"
        },
        {
          "path": "requirements.txt",
          "content": "flet>=0.8.0\n"
        }
      ]
    }
  ],
  "component_templates": [
    {
      "name": "カスタムカード",
      "description": "再利用可能なカードコンポーネント",
      "content": "import flet as ft\n\nclass CustomCard(ft.UserControl):\n    \"\"\"カスタムカードコンポーネント\"\"\"\n    \n    def __init__(self, title, description, image_url=None, on_click=None):\n        super().__init__()\n        self.title = title\n        self.description = description\n        self.image_url = image_url\n        self.on_click = on_click\n    \n    def build(self):\n        # 画像がある場合は表示\n        if self.image_url:\n            image = ft.Image(\n                src=self.image_url,\n                width=500,\n                height=200,\n                fit=ft.ImageFit.COVER,\n                border_radius=ft.border_radius.only(top_left=10, top_right=10)\n            )\n        else:\n            image = None\n        \n        # カードコンテンツ\n        content = ft.Column([\n            ft.Text(self.title, weight=ft.FontWeight.BOLD, size=16),\n            ft.Text(self.description),\n            ft.Row([\n                ft.TextButton(\"詳細\", on_click=self.on_click),\n                ft.IconButton(\n                    icon=ft.icons.FAVORITE_BORDER,\n                    tooltip=\"お気に入り\",\n                    on_click=lambda e: e.control.icon == ft.icons.FAVORITE_BORDER and setattr(e.control, 'icon', ft.icons.FAVORITE) or setattr(e.control, 'icon', ft.icons.FAVORITE_BORDER)\n                )\n            ], alignment=ft.MainAxisAlignment.SPACE_BETWEEN)\n        ])\n        \n        # カードの構築\n        card_content = [content]\n        if image:\n            card_content.insert(0, image)\n        \n        return ft.Card(\n            content=ft.Container(\n                content=ft.Column(card_content),\n                padding=15 if not self.image_url else ft.padding.only(left=15, right=15, bottom=15),\n            ),\n            elevation=2,\n            margin=10\n        )\n"
    },
    {
      "name": "アラートダイアログ",
      "description": "カスタマイズ可能なアラートダイアログ",
      "content": "import flet as ft\n\nclass AlertDialog(ft.UserControl):\n    \"\"\"カスタムアラートダイアログ\"\"\"\n    \n    def __init__(self, page, title, content, actions=None):\n        super().__init__()\n        self.page = page\n        self.title = title\n        self.content = content\n        self.actions = actions or []\n    \n    def build(self):\n        # ダイアログコンテンツ\n        dialog = ft.AlertDialog(\n            title=ft.Text(self.title),\n            content=ft.Text(self.content) if isinstance(self.content, str) else self.content,\n            actions=self.actions\n        )\n        \n        return dialog\n    \n    def show(self):\n        \"\"\"ダイアログを表示\"\"\"\n        self.page.dialog = self.build()\n        self.page.dialog.open = True\n        self.page.update()\n    \n    def close(self):\n        \"\"\"ダイアログを閉じる\"\"\"\n        if self.page.dialog and self.page.dialog.open:\n            self.page.dialog.open = False\n            self.page.update()\n    \n    @staticmethod\n    def show_simple_dialog(page, title, content, on_dismiss=None):\n        \"\"\"シンプルな確認ダイアログを表示するユーティリティメソッド\"\"\"\n        def close_dialog(e):\n            page.dialog.open = False\n            page.update()\n            if on_dismiss:\n                on_dismiss()\n        \n        page.dialog = ft.AlertDialog(\n            title=ft.Text(title),\n            content=ft.Text(content) if isinstance(content, str) else content,\n            actions=[\n                ft.TextButton(\"OK\", on_click=close_dialog),\n            ],\n        )\n        page.dialog.open = True\n        page.update()\n    \n    @staticmethod\n    def show_confirmation_dialog(page, title, content, on_confirm=None, on_cancel=None):\n        \"\"\"確認ダイアログを表示するユーティリティメソッド\"\"\"\n        def handle_confirm(e):\n            page.dialog.open = False\n            page.update()\n            if on_confirm:\n                on_confirm()\n        \n        def handle_cancel(e):\n            page.dialog.open = False\n            page.update()\n            if on_cancel:\n                on_cancel()\n        \n        page.dialog = ft.AlertDialog(\n            title=ft.Text(title),\n            content=ft.Text(content) if isinstance(content, str) else content,\n            actions=[\n                ft.TextButton(\"キャンセル\", on_click=handle_cancel),\n                ft.TextButton(\"確認\", on_click=handle_confirm),\n            ],\n        )\n        page.dialog.open = True\n        page.update()\n"
    },
    {
      "name": "データテーブル",
      "description": "ソート可能なデータテーブルコンポーネント",
      "content": "import flet as ft\n\nclass DataTable(ft.UserControl):\n    \"\"\"カスタムデータテーブルコンポーネント\"\"\"\n    \n    def __init__(self, columns, rows, on_row_select=None):\n        super().__init__()\n        self.columns = columns  # {\"id\": \"ID\", \"name\": \"名前\"} 形式\n        self.rows = rows  # [{\"id\": 1, \"name\": \"山田太郎\"}] 形式\n        self.on_row_select = on_row_select\n        self.sort_column = None\n        self.sort_ascending = True\n        self.selected_row = None\n    \n    def sort_data(self, column):\n        \"\"\"指定された列でデータをソート\"\"\"\n        if self.sort_column == column:\n            # 同じ列が選択された場合は順序を反転\n            self.sort_ascending = not self.sort_ascending\n        else:\n            # 新しい列が選択された場合\n            self.sort_column = column\n            self.sort_ascending = True\n        \n        # ソート実行\n        if column in self.columns:\n            self.rows.sort(\n                key=lambda x: x.get(column, \"\"),\n                reverse=not self.sort_ascending\n            )\n        \n        # テーブルを再構築\n        self.update()\n    \n    def build(self):\n        # ヘッダー行\n        header_cells = []\n        for col_id, col_name in self.columns.items():\n            header_cells.append(\n                ft.DataCell(\n                    ft.Row([\n                        ft.Text(col_name),\n                        ft.Icon(\n                            ft.icons.ARROW_UPWARD if self.sort_column == col_id and self.sort_ascending else ft.icons.ARROW_DOWNWARD,\n                            size=15,\n                            visible=self.sort_column == col_id\n                        )\n                    ]),\n                    on_tap=lambda _, c=col_id: self.sort_data(c)\n                )\n            )\n        \n        # データ行\n        data_rows = []\n        for i, row_data in enumerate(self.rows):\n            cells = []\n            for col_id in self.columns.keys():\n                cells.append(ft.DataCell(ft.Text(str(row_data.get(col_id, \"\")))))\n            \n            data_rows.append(\n                ft.DataRow(\n                    cells=cells,\n                    selected=self.selected_row == i,\n                    on_select_changed=lambda e, idx=i, data=row_data: self.select_row(idx, data)\n                )\n            )\n        \n        return ft.DataTable(\n            columns=[ft.DataColumn(header_cell) for header_cell in header_cells],\n            rows=data_rows,\n            border=ft.border.all(1, ft.colors.BLACK12),\n            border_radius=10,\n            vertical_lines=ft.border.BorderSide(1, ft.colors.BLACK12),\n            horizontal_lines=ft.border.BorderSide(1, ft.colors.BLACK12),\n            sort_column_index=list(self.columns.keys()).index(self.sort_column) if self.sort_column else None,\n            sort_ascending=self.sort_ascending,\n            heading_row_height=50,\n            data_row_min_height=45,\n            data_row_max_height=60,\n            column_spacing=5,\n            show_checkbox_column=True\n        )\n    \n    def select_row(self, idx, data):\n        \"\"\"行選択時の処理\"\"\"\n        self.selected_row = idx\n        if self.on_row_select:\n            self.on_row_select(data)\n        self.update()\n    \n    def add_row(self, row_data):\n        \"\"\"行を追加\"\"\"\n        self.rows.append(row_data)\n        self.update()\n    \n    def remove_selected_row(self):\n        \"\"\"選択行を削除\"\"\"\n        if self.selected_row is not None and 0 <= self.selected_row < len(self.rows):\n            del self.rows[self.selected_row]\n            self.selected_row = None\n            self.update()\n    \n    def update_row(self, idx, row_data):\n        \"\"\"指定行を更新\"\"\"\n        if 0 <= idx < len(self.rows):\n            self.rows[idx] = row_data\n            self.update()\n"
    },
    {
      "name": "ナビゲーションドロワー",
      "description": "サイドナビゲーションドロワー",
      "content": "import flet as ft\n\nclass NavigationDrawer(ft.UserControl):\n    \"\"\"ナビゲーションドロワーコンポーネント\"\"\"\n    \n    def __init__(self, page, items, on_item_selected=None):\n        super().__init__()\n        self.page = page\n        self.items = items  # [{\"icon\": ft.icons.HOME, \"text\": \"ホーム\", \"route\": \"/\"}] 形式\n        self.on_item_selected = on_item_selected\n        self.selected_index = 0\n    \n    def build(self):\n        # ナビゲーション項目リスト\n        nav_items = []\n        \n        for i, item in enumerate(self.items):\n            nav_item = ft.ListTile(\n                leading=ft.Icon(item[\"icon\"]),\n                title=ft.Text(item[\"text\"]),\n                selected=i == self.selected_index,\n                on_click=lambda e, idx=i, route=item.get(\"route\"): self.handle_item_click(idx, route)\n            )\n            nav_items.append(nav_item)\n        \n        # ドロワーコンテンツ\n        return ft.NavigationDrawer(\n            controls=[\n                ft.Container(\n                    content=ft.Column([\n                        ft.Container(\n                            content=ft.Row([\n                                ft.Text(\"メニュー\", weight=ft.FontWeight.BOLD, size=20),\n                            ]),\n                            padding=20,\n                        ),\n                        ft.Divider(),\n                        *nav_items\n                    ]),\n                    padding=ft.padding.only(bottom=20)\n                )\n            ],\n            surface_tint_color=ft.colors.ON_SURFACE_VARIANT,\n            bgcolor=ft.colors.SURFACE,\n            elevation=1,\n        )\n    \n    def handle_item_click(self, idx, route):\n        \"\"\"項目クリック時の処理\"\"\"\n        self.selected_index = idx\n        self.update()\n        \n        # クリックイベントを伝播\n        if self.on_item_selected:\n            self.on_item_selected(idx, route)\n        \n        # ドロワーを閉じる\n        self.page.drawer.open = False\n        self.page.update()\n    \n    def open(self):\n        \"\"\"ドロワーを開く\"\"\"\n        self.page.drawer = self.build()\n        self.page.drawer.open = True\n        self.page.update()\n    \n    def close(self):\n        \"\"\"ドロワーを閉じる\"\"\"\n        if self.page.drawer:\n            self.page.drawer.open = False\n            self.page.update()\n"
    }
  ],
  "screen_templates": [
    {
      "name": "ログイン画面",
      "description": "認証用のログイン画面",
      "content": "import flet as ft\nfrom validators import validate_email, validate_password\n\nclass LoginScreen(ft.UserControl):\n    \"\"\"ログイン画面コンポーネント\"\"\"\n    \n    def __init__(self, page, on_login_success=None, on_forgot_password=None, on_signup=None):\n        super().__init__()\n        self.page = page\n        self.on_login_success = on_login_success\n        self.on_forgot_password = on_forgot_password\n        self.on_signup = on_signup\n        \n        # フォームフィールド\n        self.email_field = ft.TextField(\n            label=\"メールアドレス\",\n            hint_text=\"example@example.com\",\n            width=400,\n            keyboard_type=ft.KeyboardType.EMAIL\n        )\n        \n        self.password_field = ft.TextField(\n            label=\"パスワード\",\n            hint_text=\"パスワードを入力\",\n            width=400,\n            password=True\n        )\n        \n        self.remember_me = ft.Checkbox(label=\"ログイン状態を保持する\")\n        \n        # エラーメッセージ\n        self.error_text = ft.Text(\n            color=ft.colors.RED,\n            size=12,\n            visible=False\n        )\n    \n    def login_clicked(self, e):\n        \"\"\"ログインボタンクリック時の処理\"\"\"\n        # バリデーション\n        email = self.email_field.value\n        password = self.password_field.value\n        \n        # バリデーションチェック\n        if not email or not password:\n            self.show_error(\"メールアドレスとパスワードを入力してください\")\n            return\n        \n        # メールアドレスの形式チェック\n        if not validate_email(email):\n            self.show_error(\"有効なメールアドレスを入力してください\")\n            return\n        \n        # パスワードの形式チェック\n        if not validate_password(password):\n            self.show_error(\"パスワードは8文字以上である必要があります\")\n            return\n        \n        # ログイン処理\n        # ここに実際の認証ロジックを追加\n        \n        # 成功時のコールバック\n        if self.on_login_success:\n            self.on_login_success({\n                \"email\": email,\n                \"remember\": self.remember_me.value\n            })\n    \n    def show_error(self, message):\n        \"\"\"エラーメッセージを表示\"\"\"\n        self.error_text.value = message\n        self.error_text.visible = True\n        self.update()\n    \n    def build(self):\n        return ft.Container(\n            content=ft.Column([\n                ft.Text(\"ログイン\", size=24, weight=ft.FontWeight.BOLD),\n                ft.Text(\"アカウントにログインしてください\", size=14, color=ft.colors.GREY_700),\n                ft.Divider(),\n                self.email_field,\n                self.password_field,\n                self.remember_me,\n                self.error_text,\n                ft.Row([\n                    ft.ElevatedButton(\"ログイン\", on_click=self.login_clicked),\n                    ft.TextButton(\"パスワードを忘れた場合\", on_click=lambda _: self.on_forgot_password() if self.on_forgot_password else None),\n                ]),\n                ft.Row([\n                    ft.Text(\"アカウントをお持ちでない場合は、\"),\n                    ft.TextButton(\"登録する\", on_click=lambda _: self.on_signup() if self.on_signup else None),\n                ])\n            ],\n            alignment=ft.MainAxisAlignment.CENTER,\n            horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n            spacing=20),\n            padding=40,\n            width=500,\n            border_radius=10,\n            border=ft.border.all(1, ft.colors.BLACK12),\n            margin=20\n        )\n\n# メールとパスワードのバリデーション関数は実際のアプリで定義する必要があります\ndef validate_email(email):\n    import re\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return re.match(pattern, email) is not None\n\ndef validate_password(password):\n    return len(password) >= 8\n"
    },
    {
      "name": "ダッシュボード画面",
      "description": "データを視覚的に表示するダッシュボード",
      "content": "import flet as ft\n\nclass DashboardScreen(ft.UserControl):\n    \"\"\"ダッシュボード画面コンポーネント\"\"\"\n    \n    def __init__(self, page):\n        super().__init__()\n        self.page = page\n        \n        # ダミーデータ\n        self.stats = [\n            {\"title\": \"ユーザー数\", \"value\": \"1,234\", \"change\": \"+12%\", \"icon\": ft.icons.PEOPLE, \"color\": ft.colors.BLUE},\n            {\"title\": \"売上高\", \"value\": \"¥45,678\", \"change\": \"+8%\", \"icon\": ft.icons.ATTACH_MONEY, \"color\": ft.colors.GREEN},\n            {\"title\": \"注文数\", \"value\": \"567\", \"change\": \"-3%\", \"icon\": ft.icons.SHOPPING_CART, \"color\": ft.colors.ORANGE},\n            {\"title\": \"訪問者数\", \"value\": \"8,901\", \"change\": \"+15%\", \"icon\": ft.icons.VISIBILITY, \"color\": ft.colors.PURPLE}\n        ]\n        \n        self.recent_activities = [\n            {\"title\": \"新規ユーザー登録\", \"time\": \"10分前\", \"icon\": ft.icons.PERSON_ADD},\n            {\"title\": \"新規注文 #12345\", \"time\": \"30分前\", \"icon\": ft.icons.RECEIPT_LONG},\n            {\"title\": \"支払い完了 #12344\", \"time\": \"1時間前\", \"icon\": ft.icons.PAYMENTS},\n            {\"title\": \"商品レビュー投稿\", \"time\": \"2時間前\", \"icon\": ft.icons.RATE_REVIEW},\n            {\"title\": \"在庫アラート: 商品A\", \"time\": \"4時間前\", \"icon\": ft.icons.INVENTORY}\n        ]\n    \n    def build(self):\n        # 統計カード\n        stat_cards = []\n        for stat in self.stats:\n            card = ft.Card(\n                content=ft.Container(\n                    content=ft.Column([\n                        ft.Row([\n                            ft.Icon(stat[\"icon\"], color=stat[\"color\"], size=30),\n                            ft.Text(stat[\"title\"], weight=ft.FontWeight.BOLD)\n                        ]),\n                        ft.Row([\n                            ft.Text(stat[\"value\"], size=24, weight=ft.FontWeight.BOLD),\n                            ft.Container(\n                                content=ft.Text(\n                                    stat[\"change\"],\n                                    color=ft.colors.GREEN if stat[\"change\"].startswith(\"+\") else ft.colors.RED\n                                ),\n                                margin=ft.margin.only(left=10)\n                            )\n                        ])\n                    ]),\n                    padding=15\n                )\n            )\n            stat_cards.append(card)\n        \n        # 統計カードのレスポンシブレイアウト\n        stats_layout = ft.ResponsiveRow(\n            [\n                ft.Column([card], col={\"xs\": 12, \"sm\": 6, \"md\": 6, \"lg\": 3})\n                for card in stat_cards\n            ]\n        )\n        \n        # アクティビティリスト\n        activity_list = ft.Column([\n            ft.ListTile(\n                leading=ft.Icon(activity[\"icon\"]),\n                title=ft.Text(activity[\"title\"]),\n                subtitle=ft.Text(activity[\"time\"]),\n            ) for activity in self.recent_activities\n        ], spacing=0)\n        \n        # グラフカード（ダミー）\n        graph_card = ft.Card(\n            content=ft.Container(\n                content=ft.Column([\n                    ft.Text(\"売上推移\", weight=ft.FontWeight.BOLD, size=16),\n                    ft.Container(\n                        content=ft.Text(\"ここに実際のグラフが表示されます\"),\n                        height=200,\n                        alignment=ft.alignment.center,\n                        border=ft.border.all(1, ft.colors.BLACK12),\n                        border_radius=5\n                    )\n                ]),\n                padding=15\n            )\n        )\n        \n        # アクティビティカード\n        activity_card = ft.Card(\n            content=ft.Container(\n                content=ft.Column([\n                    ft.Text(\"最近のアクティビティ\", weight=ft.FontWeight.BOLD, size=16),\n                    activity_list\n                ]),\n                padding=15\n            )\n        )\n        \n        # メインレイアウト\n        return ft.Container(\n            content=ft.Column([\n                ft.Text(\"ダッシュボード\", size=30, weight=ft.FontWeight.BOLD),\n                ft.Text(\"今日の統計情報\", size=16, color=ft.colors.GREY_700),\n                stats_layout,\n                ft.ResponsiveRow([\n                    ft.Column([graph_card], col={\"xs\": 12, \"md\": 8}),\n                    ft.Column([activity_card], col={\"xs\": 12, \"md\": 4})\n                ])\n            ]),\n            padding=20,\n            expand=True\n        )\n"
    },
    {
      "name": "設定画面",
      "description": "アプリケーション設定を管理する画面",
      "content": "import flet as ft\n\nclass SettingsScreen(ft.UserControl):\n    \"\"\"設定画面コンポーネント\"\"\"\n    \n    def __init__(self, page, on_settings_changed=None):\n        super().__init__()\n        self.page = page\n        self.on_settings_changed = on_settings_changed\n        \n        # 設定の初期値\n        self.settings = {\n            \"theme_mode\": \"system\",  # system, light, dark\n            \"notifications\": True,\n            \"sound\": True,\n            \"auto_update\": False,\n            \"language\": \"ja\",  # ja, en, etc.\n            \"font_size\": 16  # 文字サイズ\n        }\n        \n        # テーマモード設定\n        self.theme_mode = ft.RadioGroup(\n            content=ft.Column([\n                ft.Radio(value=\"system\", label=\"システム設定に従う\"),\n                ft.Radio(value=\"light\", label=\"ライトモード\"),\n                ft.Radio(value=\"dark\", label=\"ダークモード\"),\n            ]),\n            value=self.settings[\"theme_mode\"],\n            on_change=self.on_theme_changed\n        )\n        \n        # 通知設定\n        self.notifications = ft.Switch(\n            label=\"通知を有効にする\",\n            value=self.settings[\"notifications\"],\n            on_change=self.on_notification_changed\n        )\n        \n        # サウンド設定\n        self.sound = ft.Switch(\n            label=\"サウンドを有効にする\",\n            value=self.settings[\"sound\"],\n            on_change=self.on_sound_changed\n        )\n        \n        # 自動更新設定\n        self.auto_update = ft.Switch(\n            label=\"自動更新を有効にする\",\n            value=self.settings[\"auto_update\"],\n            on_change=self.on_auto_update_changed\n        )\n        \n        # 言語設定\n        self.language = ft.Dropdown(\n            label=\"言語\",\n            options=[\n                ft.dropdown.Option(\"ja\", \"日本語\"),\n                ft.dropdown.Option(\"en\", \"English\"),\n                ft.dropdown.Option(\"zh\", \"中文\"),\n                ft.dropdown.Option(\"ko\", \"한국어\")\n            ],\n            value=self.settings[\"language\"],\n            on_change=self.on_language_changed\n        )\n        \n        # 文字サイズ設定\n        self.font_size = ft.Slider(\n            min=12,\n            max=24,\n            divisions=12,\n            label=\"{value}px\",\n            value=self.settings[\"font_size\"],\n            on_change=self.on_font_size_changed\n        )\n    \n    def on_theme_changed(self, e):\n        self.settings[\"theme_mode\"] = self.theme_mode.value\n        # テーマの実際の反映処理\n        if self.theme_mode.value == \"light\":\n            self.page.theme_mode = ft.ThemeMode.LIGHT\n        elif self.theme_mode.value == \"dark\":\n            self.page.theme_mode = ft.ThemeMode.DARK\n        else:\n            self.page.theme_mode = ft.ThemeMode.SYSTEM\n        self.page.update()\n        \n        self._trigger_settings_changed()\n    \n    def on_notification_changed(self, e):\n        self.settings[\"notifications\"] = self.notifications.value\n        self._trigger_settings_changed()\n    \n    def on_sound_changed(self, e):\n        self.settings[\"sound\"] = self.sound.value\n        self._trigger_settings_changed()\n    \n    def on_auto_update_changed(self, e):\n        self.settings[\"auto_update\"] = self.auto_update.value\n        self._trigger_settings_changed()\n    \n    def on_language_changed(self, e):\n        self.settings[\"language\"] = self.language.value\n        self._trigger_settings_changed()\n    \n    def on_font_size_changed(self, e):\n        self.settings[\"font_size\"] = self.font_size.value\n        self._trigger_settings_changed()\n    \n    def _trigger_settings_changed(self):\n        if self.on_settings_changed:\n            self.on_settings_changed(self.settings)\n    \n    def save_settings(self, e):\n        \"\"\"設定を保存\"\"\"\n        # 実際のアプリでは設定をファイルやデータベースに保存する処理を実装\n        self.page.snack_bar = ft.SnackBar(content=ft.Text(\"設定が保存されました\"))\n        self.page.snack_bar.open = True\n        self.page.update()\n    \n    def reset_settings(self, e):\n        \"\"\"設定をデフォルトに戻す\"\"\"\n        default_settings = {\n            \"theme_mode\": \"system\",\n            \"notifications\": True,\n            \"sound\": True,\n            \"auto_update\": False,\n            \"language\": \"ja\",\n            \"font_size\": 16\n        }\n        \n        # 値を更新\n        self.settings = default_settings\n        self.theme_mode.value = default_settings[\"theme_mode\"]\n        self.notifications.value = default_settings[\"notifications\"]\n        self.sound.value = default_settings[\"sound\"]\n        self.auto_update.value = default_settings[\"auto_update\"]\n        self.language.value = default_settings[\"language\"]\n        self.font_size.value = default_settings[\"font_size\"]\n        \n        # UIを更新\n        self.update()\n        \n        # テーマを反映\n        self.page.theme_mode = ft.ThemeMode.SYSTEM\n        self.page.update()\n        \n        # 変更を通知\n        self._trigger_settings_changed()\n        \n        # 通知\n        self.page.snack_bar = ft.SnackBar(content=ft.Text(\"設定がリセットされました\"))\n        self.page.snack_bar.open = True\n        self.page.update()\n    \n    def build(self):\n        return ft.Container(\n            content=ft.Column([\n                ft.Text(\"設定\", size=30, weight=ft.FontWeight.BOLD),\n                ft.Divider(),\n                \n                # テーマ設定セクション\n                ft.Text(\"テーマ\", size=20, weight=ft.FontWeight.BOLD),\n                self.theme_mode,\n                ft.Divider(),\n                \n                # 通知設定セクション\n                ft.Text(\"通知とサウンド\", size=20, weight=ft.FontWeight.BOLD),\n                self.notifications,\n                self.sound,\n                ft.Divider(),\n                \n                # アプリ設定セクション\n                ft.Text(\"アプリケーション\", size=20, weight=ft.FontWeight.BOLD),\n                self.auto_update,\n                ft.Row([\n                    ft.Text(\"言語:\"),\n                    self.language\n                ]),\n                ft.Text(\"文字サイズ:\"),\n                self.font_size,\n                ft.Divider(),\n                \n                # ボタンセクション\n                ft.Row([\n                    ft.FilledButton(\"設定を保存\", on_click=self.save_settings),\n                    ft.OutlinedButton(\"デフォルトに戻す\", on_click=self.reset_settings),\n                ])\n            ]),\n            padding=20,\n            expand=True\n        )\n"
    }
  ]
}
